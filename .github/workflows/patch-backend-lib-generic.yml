on:
  workflow_call:
    inputs:
      githubappId:
        required: true
        type: string
      branchRef:
        description: 'Patch branch (format: release-vX.Y.Z)'
        required: true
        type: string
      environment:
        required: false
        default: 'release'
        type: string
    secrets:
      VERSIONBUMP_GHAPP_PRIVATE_KEY:
        required: true

jobs:
  patch:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      # don't allow to disable this check, and for security only succeed if everything goes perfectly and outputs "true"
      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check Actor Permission
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "checking permission=maintain on repo=$GITHUB_REPOSITORY for user=$GITHUB_ACTOR"
          # no need to escape GITHUB_REPOSITORY and GITHUB_ACTOR because github
          # names can only contain ASCII letters, digits, and the characters ., # -, and _.
          # permission: legacy, is actually a role (one per user) and doesn't
          #   have "maintain" role, only ["none", "read", "write", "admin"]
          # role_name: one per user, new standard roles, custom roles, "" and
          #   "push" and "pull" instead of "none" and "read" and "write": "",
          #   "read", "triage", "write", "maintain", "admin" and also non
          #   standard custom roles
          # user.permissions: boolean status only for each standard permissions "pull", "triage", "push", "maintain", "admin"
          # So the best for now is to use user.permissions I think.
          # NOTE: the gh api returns a JSON boolean so jq can only output true or false without quotes
          # (actually even for JSON strings gh's gojq implementation strips the quotes by default unlike jq)
          allowed=$(gh api "repos/$GITHUB_REPOSITORY/collaborators/$GITHUB_ACTOR/permission" --jq '.user.permissions["maintain"]')
          [[ "$allowed" == "true" ]] || exit 1

      - name: Validate branch name format
        run: |
          if [[ ! "${{ inputs.branchRef }}" =~ ^release-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid branch name format. Expected format: release-vX.Y.Z"
            exit 1
          fi

      # TODO make a composite action for the next steps to setup git (unless create-github-app-token incorporates all this...)
      # Copied from create-github-app-token README "Configure git CLI for an app's bot user"
      - uses: actions/create-github-app-token@v1
        id: app-token
        name: Generate app token
        with:
          app-id: ${{ inputs.githubappId }}
          private-key: ${{ secrets.VERSIONBUMP_GHAPP_PRIVATE_KEY }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Setup git user
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ inputs.branchRef }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v1
        with:
          java-version: 21

      - name: Extract version and validate tag
        id: versions
        run: |
          PATCH_VERSION=$(echo "${{ inputs.branchRef }}" | sed 's/release-v\(.*\)/\1/')
          
          if git rev-parse "v${PATCH_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${PATCH_VERSION} already exists"
            exit 1
          fi
          
          echo "PATCH_VERSION=${PATCH_VERSION}" >> $GITHUB_OUTPUT
          echo "Patch version will be: ${PATCH_VERSION}"

      - name: Set patch version
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.PATCH_VERSION }} -DgenerateBackupPoms=false
          git commit -am "Patched version ${{ steps.versions.outputs.PATCH_VERSION }}"

      - name: Create and push tag
        run: |
          git tag v${{ steps.versions.outputs.PATCH_VERSION }}
          git push origin v${{ steps.versions.outputs.PATCH_VERSION }}
          git push origin ${{ inputs.branchRef }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh release create v${{ steps.versions.outputs.PATCH_VERSION }} \
            --title "v${{ steps.versions.outputs.PATCH_VERSION }}" \
            --generate-notes \
            --notes "Patch release based on ${{ inputs.branchRef }}"