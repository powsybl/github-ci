on:
  workflow_call:
    inputs:
      githubappId:
        required: true
        type: string
      releaseVersion:
        required: true
        type: string
      environment:
        required: false
        default: 'release'
        type: string
    secrets:
      VERSIONBUMP_GHAPP_PRIVATE_KEY:
        required: true

jobs:
  patch:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      # don't allow to disable this check, and for security only succeed if everything goes perfectly and outputs "true"
      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check Actor Permission
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "checking permission=maintain on repo=$GITHUB_REPOSITORY for user=$GITHUB_ACTOR"
          # no need to escape GITHUB_REPOSITORY and GITHUB_ACTOR because github
          # names can only contain ASCII letters, digits, and the characters ., # -, and _.
          # permission: legacy, is actually a role (one per user) and doesn't
          #   have "maintain" role, only ["none", "read", "write", "admin"]
          # role_name: one per user, new standard roles, custom roles, "" and
          #   "push" and "pull" instead of "none" and "read" and "write": "",
          #   "read", "triage", "write", "maintain", "admin" and also non
          #   standard custom roles
          # user.permissions: boolean status only for each standard permissions "pull", "triage", "push", "maintain", "admin"
          # So the best for now is to use user.permissions I think.
          # NOTE: the gh api returns a JSON boolean so jq can only output true or false without quotes
          # (actually even for JSON strings gh's gojq implementation strips the quotes by default unlike jq)
          allowed=$(gh api "repos/$GITHUB_REPOSITORY/collaborators/$GITHUB_ACTOR/permission" --jq '.user.permissions["maintain"]')
          [[ "$allowed" == "true" ]] || exit 1

      # TODO make a composite action for the next steps to setup git (unless create-github-app-token incorporates all this...)
      # Copied from create-github-app-token README "Configure git CLI for an app's bot user"
      - uses: actions/create-github-app-token@21cfef2b496dd8ef5b904c159339626a10ad380e # v1 v1.11.6
        id: app-token
        name: Generate app token
        with:
          app-id: ${{ inputs.githubappId }}
          private-key: ${{ secrets.VERSIONBUMP_GHAPP_PRIVATE_KEY }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${RUNGHA_APP_SLUG}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          RUNGHA_APP_SLUG: ${{ steps.app-token.outputs.app-slug }} # just for defense against script injection
      - name: Setup git user
        run: |
          git config --global user.name "${RUNGHA_APP_SLUG}[bot]"
          git config --global user.email "${RUNGHA_USER_ID}+${RUNGHA_APP_SLUG}[bot]@users.noreply.github.com"
        env:
          RUNGHA_APP_SLUG: ${{ steps.app-token.outputs.app-slug }} # just for defense against script injection
          RUNGHA_USER_ID: ${{ steps.get-user-id.outputs.user-id }} # just for defense against script injection

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4 v4.2.2
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Parse release version
        run: |
          regex="^v([0-9]+)\.([0-9]+)$"
          if [[ $RUNGHA_RELEASE_VERSION =~ $regex ]]
          then
            echo Release version matches vX.X format
          else 
            echo ERROR: release version should match the format vX.X
            exit 1
          fi
        env:
          RUNGHA_RELEASE_VERSION: ${{ inputs.releaseVersion }} # just for defense against script injection

      - name: Check if release already exists
        run: |
          if git ls-remote --quiet --exit-code origin "refs/heads/release-$RUNGHA_RELEASE_VERSION" >/dev/null 2>&1
          then
            echo "Release $RUNGHA_RELEASE_VERSION already exists, patch will be perfomed"
          else
            echo "Release $RUNGHA_RELEASE_VERSION doesn't exist, patch cannot be performed"
            exit 1
          fi
        env:
          RUNGHA_RELEASE_VERSION: ${{ inputs.releaseVersion }} # just for defense against script injection

      - name: Checkout on existing release branch
        run: |
          git checkout "release-$RUNGHA_RELEASE_VERSION"
        env:
          RUNGHA_RELEASE_VERSION: ${{ inputs.releaseVersion }} # just for defense against script injection

      - name: Extract tag versions
        run: |
          lastTag=$(git describe --tags --abbrev=0)
          regex="^v([0-9]+)\.([0-9]+)\.([0-9]+)$"
          if [[ $lastTag =~ $regex ]]
          then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            ((++patch))
            echo "GITHUB_MAJOR_VERSION=$major" >> $GITHUB_ENV
            echo "GITHUB_MINOR_VERSION=$minor" >> $GITHUB_ENV
            echo "GITHUB_PATCH_VERSION=$patch" >> $GITHUB_ENV
            echo "GITHUB_SHORT_VERSION=$major.$minor.$patch" >> $GITHUB_ENV
          else
            echo "ERROR: last tag $lastTag does not match required format vX.X.X"
            exit 1
          fi

      - name: Create tag
        run: |
          git tag "v$GITHUB_SHORT_VERSION"

      - name: Push release branch and tag
        run: |
          git push origin "v$GITHUB_SHORT_VERSION"
