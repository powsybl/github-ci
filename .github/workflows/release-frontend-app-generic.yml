on:
  workflow_call:
    inputs:
      releaseVersion:
        description: 'Release version (format: vX.X)'
        required: true
        type: string
      commitSha:
        description: 'SHA of the commit to release from'
        required: true
        type: string
      dockerImage:
        description: 'Name of the Docker image (e.g., organization/app-name)'
        required: true
        type: string
      dockerUsername:
        required: true
        type: string
      githubappId:
        description: 'GitHub App ID for authentication'
        required: true
        type: string
      environment:
        required: false
        default: 'release'
        type: string
    secrets:
      VERSIONBUMP_GHAPP_PRIVATE_KEY:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      sonar-token:
        required: true

env:
  NODE_OPTIONS: '--max_old_space_size=4096'

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      # don't allow to disable this check, and for security only succeed if everything goes perfectly and outputs "true"
      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check Actor Permission
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "checking permission=maintain on repo=$GITHUB_REPOSITORY for user=$GITHUB_ACTOR"
          # no need to escape GITHUB_REPOSITORY and GITHUB_ACTOR because github
          # names can only contain ASCII letters, digits, and the characters ., # -, and _.
          # permission: legacy, is actually a role (one per user) and doesn't
          #   have "maintain" role, only ["none", "read", "write", "admin"]
          # role_name: one per user, new standard roles, custom roles, "" and
          #   "push" and "pull" instead of "none" and "read" and "write": "",
          #   "read", "triage", "write", "maintain", "admin" and also non
          #   standard custom roles
          # user.permissions: boolean status only for each standard permissions "pull", "triage", "push", "maintain", "admin"
          # So the best for now is to use user.permissions I think.
          # NOTE: the gh api returns a JSON boolean so jq can only output true or false without quotes
          # (actually even for JSON strings gh's gojq implementation strips the quotes by default unlike jq)
          allowed=$(gh api "repos/$GITHUB_REPOSITORY/collaborators/$GITHUB_ACTOR/permission" --jq '.user.permissions["maintain"]')
          [[ "$allowed" == "true" ]] || exit 1

      # TODO make a composite action for the next steps to setup git (unless create-github-app-token incorporates all this...)
      # Copied from create-github-app-token README "Configure git CLI for an app's bot user"
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ inputs.githubappId }}
          private-key: ${{ secrets.VERSIONBUMP_GHAPP_PRIVATE_KEY }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Setup git user
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org

      - name: Extract Version Numbers
        run: |
          if ! [[ ${{ inputs.releaseVersion }} =~ ^v([0-9]+)\.([0-9]+)$ ]]; then
            echo "Error: Invalid version format. Must be vX.X (e.g., v1.2)"
            exit 1
          fi
          
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          
          echo "RELEASE_MAJOR_VERSION=${MAJOR}" >> $GITHUB_ENV
          echo "RELEASE_MINOR_VERSION=${MINOR}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${MAJOR}.${MINOR}.0" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=release-v${MAJOR}.${MINOR}" >> $GITHUB_ENV

      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check if commitSha is already released
        run: |
          # needs fetch-depth: 0
          # This ensures that an old commit (potentially with a security issue) can not be rereleased
          # as a new version (thus potentially restoring a security issue). This will not block regular
          # releases because there is always at least the version bump commit in a real new release even if
          # we are just rereleasing the same code with a new name as part of a global release.
          if ! release_tags=$(git tag --contains ${{ inputs.commitSha }} 'v[0-9]*'); then
            echo "ERROR checking whether sha ${{ inputs.commitSha }} is already released or not."
            exit 1
          elif [ -n "$release_tags" ]; then
            echo "ERROR: sha ${{ inputs.commitSha }} already released: $release_tags"
            exit 1
          else
            echo "sha ${{ inputs.commitSha }} never released, release will be performed"
          fi

      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check if commitSha is merged in main
        run: |
          # needs fetch-depth: 0
          # This ensures that only reviewed commits can be released because
          # we require reviews and pull requests to allow to merge in main.
          if ! main_contains=$(git branch -r --format='%(refname:short)' --contains ${{ inputs.commitSha }} origin/main); then
            echo "ERROR checking whether sha ${{ inputs.commitSha }} is merged in main or not"
            exit 1
          elif [ -z "$main_contains" ]; then
            echo "ERROR: sha ${{ inputs.commitSha }} not merged in main"
            exit 1
          else
            echo "sha ${{ inputs.commitSha }} merged in main, release will be performed"
          fi

      - name: Create Release Branch
        run: git checkout -b ${{ env.RELEASE_BRANCH }} ${{ inputs.commitSha }}

      - name: Update Version and Tag
        run: |
          # Use npm version to update version, create commit and tag
          npm version ${{ env.RELEASE_VERSION }}

      - name: Install Dependencies
        run: npm ci

      - name: Quality Checks
        run: |
          npm run lint
          npm run test:coverage
          npm run licenses-check

      - name: Build Application
        run: npm run build

      - name: SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v3.0.0
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          SONAR_TOKEN: ${{ secrets.sonar-token }}

      - name: Build and publish Docker image
        uses: elgohr/Publish-Docker-Github-Action@33a481be3e179353cb7793a92b57cf9a6c985860 # v4
        with:
          name: ${{ inputs.dockerImage }}
          username: ${{ inputs.dockerUsername }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tags: ${{ env.RELEASE_VERSION }}

      - name: Push release branch and tag
        run: |
          git push origin ${{ env.RELEASE_BRANCH }}
          git push origin v${{ env.RELEASE_VERSION }}

      - name: Checkout main
        run: |
          git checkout main
          git pull

      - name: Get current package version
        run: echo "CURRENT_NPM_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Extract current version
        run: |
          regex="(.*)-SNAPSHOT"
          if [[ ${{ env.CURRENT_NPM_VERSION }} =~ $regex ]]; 
          then
            echo "CURRENT_RELEASE_VERSION=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          fi

      - name: Update SNAPSHOT version on main
        if: env.CURRENT_RELEASE_VERSION == env.RELEASE_VERSION
        run: |
          # Calculate next development version
          NEW_MINOR=$((RELEASE_MINOR_VERSION + 1))
          DEV_VERSION="${RELEASE_MAJOR_VERSION}.${NEW_MINOR}.0-SNAPSHOT"
          
          # Update package.json with development version
          npm version ${DEV_VERSION} --no-git-tag-version
          
          # Commit and push changes
          git add .
          git commit -m "Bump version to v${DEV_VERSION}"
          git push origin main
