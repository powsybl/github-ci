on:
  workflow_call:
    inputs:
      versionType:
        description: 'Type of version increment (major, minor, patch)'
        required: true
        type: string
      nodeAuthToken:
        description: 'NPM automation access token'
        required: true
        type: string
      githubappId:
        description: 'GitHub App ID for authentication'
        required: true
        type: string
      environment:
        required: false
        default: 'release'
        type: string
    secrets:
      VERSIONBUMP_GHAPP_PRIVATE_KEY:
        required: true

permissions:
  # Permissions needed for creating a github release (gh release create)
  # Note: Using broader write permissions as there's no more granular permission specifically for releases operations.
  contents: write
  # permission for npm error Provenance generation in GitHub Actions requires "write" access to the "id-token" permission
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      # don't allow to disable this check, and for security only succeed if everything goes perfectly and outputs "true"
      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check Actor Permission
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "checking permission=maintain on repo=$GITHUB_REPOSITORY for user=$GITHUB_ACTOR"
          # no need to escape GITHUB_REPOSITORY and GITHUB_ACTOR because github
          # names can only contain ASCII letters, digits, and the characters ., # -, and _.
          # permission: legacy, is actually a role (one per user) and doesn't
          #   have "maintain" role, only ["none", "read", "write", "admin"]
          # role_name: one per user, new standard roles, custom roles, "" and
          #   "push" and "pull" instead of "none" and "read" and "write": "",
          #   "read", "triage", "write", "maintain", "admin" and also non
          #   standard custom roles
          # user.permissions: boolean status only for each standard permissions "pull", "triage", "push", "maintain", "admin"
          # So the best for now is to use user.permissions I think.
          # NOTE: the gh api returns a JSON boolean so jq can only output true or false without quotes
          # (actually even for JSON strings gh's gojq implementation strips the quotes by default unlike jq)
          allowed=$(gh api "repos/$GITHUB_REPOSITORY/collaborators/$GITHUB_ACTOR/permission" --jq '.user.permissions["maintain"]')
          [[ "$allowed" == "true" ]] || exit 1

      - name: Validate Version Type
        run: |
          if [[ ! "$RUNGHA_VERSION_TYPE" =~ ^(major|minor|patch)$ ]]; then
            echo "Error: versionType must be one of: major, minor, patch"
            echo "Received: $RUNGHA_VERSION_TYPE"
            exit 1
          fi
        env:
          RUNGHA_VERSION_TYPE: ${{ inputs.versionType }} # just for defense against script injection

      - name: Mask Node Auth Token
        run: |
          NODE_AUTH_TOKEN=$(jq -r '.inputs.nodeAuthToken' $GITHUB_EVENT_PATH)
          echo ::add-mask::$NODE_AUTH_TOKEN
          echo "NODE_AUTH_TOKEN=$NODE_AUTH_TOKEN" >> $GITHUB_ENV

      # TODO make a composite action for the next steps to setup git (unless create-github-app-token incorporates all this...)
      # Copied from create-github-app-token README "Configure git CLI for an app's bot user"
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@21cfef2b496dd8ef5b904c159339626a10ad380e # v1 v1.11.6
        with:
          app-id: ${{ inputs.githubappId }}
          private-key: ${{ secrets.VERSIONBUMP_GHAPP_PRIVATE_KEY }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${RUNGHA_APP_SLUG}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          RUNGHA_APP_SLUG: ${{ steps.app-token.outputs.app-slug }} # just for defense against script injection
      # git user not used normally anymore because we use the github commit API
      # to create the commits, but keep this anyway just in case. We do get the
      # exact same value as the one github uses for creating the signed commits.
      - name: Setup git user
        run: |
          git config --global user.name "${RUNGHA_APP_SLUG}[bot]"
          git config --global user.email "${RUNGHA_USER_ID}+${RUNGHA_APP_SLUG}[bot]@users.noreply.github.com"
        env:
          RUNGHA_APP_SLUG: ${{ steps.app-token.outputs.app-slug }} # just for defense against script injection
          RUNGHA_USER_ID: ${{ steps.get-user-id.outputs.user-id }} # just for defense against script injection

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4 v4.2.2
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4 v4.3.0
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org

      - name: check npm publish rights
        run: |
          NPMUSER=$(npm whoami)
          # NOTE: when using --json, the [[<user>]] arg is ignored and all users are returned (npm 10.9.2)
          # it's still better to use json than parsing human readable data which may change and to guard
          # against a user with a weird username like having a colon or whitespace or even "read-write" in its name.
          # Example invocations:
          #   $ npm access list collaborators mypackage myuser
          #   myuser: read-write
          # vs
          #   $ npm access list collaborators mypackage myuser --json
          #   {
          #     "otheruser": "read-write",
          #     "myuser": "read-write"
          #   }
          # NOTE: need to correctly pass the username as data to the jq script to avoid injections
          # NOTE: this fails with automation tokens, but works without any auth! hence --userconfig /dev/null
          NPMACCESS=$(npm --userconfig /dev/null access list collaborators --json | jq -r --arg NPMUSER "$NPMUSER" '.[$NPMUSER]')
          # As per the docs, "Access is either read-write or read-only."
          # only proceed if everything goes perfectly and we have read-write
          # NOTE: If npm ever adds more roles like "admin" which should rightfully be
          # allowed to release, we will have to revisit this, maybe they will
          # provide a boolean map of permissions instead of just an access name
          # like github for the actor permission?
          [[ "$NPMACCESS" == "read-write" ]] || exit 1

      - name: check npm token type automation
        run: |
          # NOTE: we can't implement a fully dependable check here, see below.
          # currently (but it may change in the future I guess), npm token lists fails with automation tokens:
          #  $ npm token list --json
          #    npm error code E403
          #    npm error 403 403 Forbidden - GET https://registry.npmjs.org/-/npm/v1/tokens
          #  $ echo $?
          #    1
          # An error exit code may mean a bad token or a valid automation token, it can never be fully dependable.
          if tokens_json=$(npm token list --json); then
            # The api call suceeded, but the only way to get a token id ('key')
            # is at the creation of the token. After that, we can only match
            # with a small prefix to identify the token so we do a best effort
            # not fully dependable check just to catch mistakes: we should
            # match at least one automation token. The API return value is
            # something like:
            #  [{
            #    "cidr_whitelist": null,
            #    "readonly": false,
            #    "automation": false,
            #    "created": "2025-04-28T11:00:10.814Z",
            #    "updated": "2025-04-28T11:00:10.814Z",
            #    "key": "d8005eXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX5bf74539",
            #    "token": "npm_KL"
            #  },
            #  {
            #    "cidr_whitelist": null,
            #    "readonly": false,
            #    "automation": true,
            #    "created": "2025-04-28T10:36:53.207Z",
            #    "updated": "2025-04-28T10:36:53.207Z",
            #    "key": "6a267cXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXc7275c4",
            #    "token": "npm_b8"
            #  }]
            # From now exit on any error, or if there are no automation tokens with a matching prefix.
            if ! echo "$tokens_json" | jq -r --arg NODE_AUTH_TOKEN $NODE_AUTH_TOKEN '.[] | select(.token | inside($NODE_AUTH_TOKEN)) | .automation' | grep "^true$"; then
              echo "No matching automation token found, release would fail because of required 2FA, please use an automation token."
              exit 1
            fi
          fi

      - name: Version and Release, push tmp branch for signed commit
        run: |
          # Use npm version to update version, don't create commit and tag, get version output vX.Y.Z
          RELEASE_V_VERSION=$(npm version --no-git-tag-version "$RUNGHA_VERSION_TYPE")
          RELEASE_VERSION=${RELEASE_V_VERSION#v}
          TMPRANDOM="$(printf "%04x" $RANDOM)$(printf "%04x" $RANDOM)$(printf "%04x" $RANDOM)"
          # random prefix so that it's not protected, but keep release information to give context
          # can't be protected because the github commit API doesn't allow to create a commit on
          # protected branch even though we have bypass rights for the token of the app
          TMPMAINBRANCH="copy-${TMPRANDOM}-main-${RELEASE_V_VERSION}"
          git push origin "main:$TMPMAINBRANCH"
          echo "TMPMAINBRANCH=$TMPMAINBRANCH" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        env:
          RUNGHA_VERSION_TYPE: ${{ inputs.versionType }} # just for defense against script injection

      # creates a signed commit on the tmp remote branch with our diff, and
      # then updates (fast-forward) our local branch to this new commit. It
      # works because the tmp remote branch was a copy of the local branch
      # before committing.
      - name: verified-bot-commit for main branch
        uses: IAreKyleW00t/verified-bot-commit@27699d08b34a5440e6b4385c6ea3651602d26bcc # v1.3.3
        with:
          token: ${{ steps.app-token.outputs.token }}
          files: "**"
          message: ${{ format('{0}', env.RELEASE_VERSION) }}
          ref: ${{ env.TMPMAINBRANCH }}

      - name: push to main and cleanup remote tmp branch
        run: |
          git push origin ":${TMPMAINBRANCH}"
          git push origin main
          git tag "v$RELEASE_VERSION" main
          git push origin "v$RELEASE_VERSION"

      - name: Install Dependencies
        run: npm ci

      - name: Publish to NPM
        run: npm publish --access=public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ env.NODE_AUTH_TOKEN }}

      - name: Create GitHub Release
        run: |
          gh release create $(git tag --points-at HEAD) --generate-notes
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
