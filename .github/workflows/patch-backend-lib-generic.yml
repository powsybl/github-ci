on:
  workflow_call:
    inputs:
      githubappId:
        required: true
        type: string
      branchRef:
        description: 'Patch branch (format: release-vX.Y.Z)'
        required: true
        type: string
      environment:
        required: false
        default: 'release'
        type: string
    secrets:
      VERSIONBUMP_GHAPP_PRIVATE_KEY:
        required: true

jobs:
  patch:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      # don't allow to disable this check, and for security only succeed if everything goes perfectly and outputs "true"
      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check Actor Permission
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "checking permission=maintain on repo=$GITHUB_REPOSITORY for user=$GITHUB_ACTOR"
          # no need to escape GITHUB_REPOSITORY and GITHUB_ACTOR because github
          # names can only contain ASCII letters, digits, and the characters ., # -, and _.
          # permission: legacy, is actually a role (one per user) and doesn't
          #   have "maintain" role, only ["none", "read", "write", "admin"]
          # role_name: one per user, new standard roles, custom roles, "" and
          #   "push" and "pull" instead of "none" and "read" and "write": "",
          #   "read", "triage", "write", "maintain", "admin" and also non
          #   standard custom roles
          # user.permissions: boolean status only for each standard permissions "pull", "triage", "push", "maintain", "admin"
          # So the best for now is to use user.permissions I think.
          # NOTE: the gh api returns a JSON boolean so jq can only output true or false without quotes
          # (actually even for JSON strings gh's gojq implementation strips the quotes by default unlike jq)
          allowed=$(gh api "repos/$GITHUB_REPOSITORY/collaborators/$GITHUB_ACTOR/permission" --jq '.user.permissions["maintain"]')
          [[ "$allowed" == "true" ]] || exit 1

      - name: Validate branch name format
        run: |
          if [[ ! "$RUNGHA_BRANCH_REF" =~ ^release-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid branch name format. Expected format: release-vX.Y.Z"
            exit 1
          fi
        env:
          RUNGHA_BRANCH_REF: ${{ inputs.branchRef }} # just for defense against script injection

      # TODO make a composite action for the next steps to setup git (unless create-github-app-token incorporates all this...)
      # Copied from create-github-app-token README "Configure git CLI for an app's bot user"
      - uses: actions/create-github-app-token@21cfef2b496dd8ef5b904c159339626a10ad380e # v1 v1.11.6
        id: app-token
        name: Generate app token
        with:
          app-id: ${{ inputs.githubappId }}
          private-key: ${{ secrets.VERSIONBUMP_GHAPP_PRIVATE_KEY }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${RUNGHA_APP_SLUG}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          RUNGHA_APP_SLUG: ${{ steps.app-token.outputs.app-slug }} # just for defense against script injection
      # git user not used normally anymore because we use the github commit API
      # to create the commits, but keep this anyway just in case. We do get the
      # exact same value as the one github uses for creating the signed commits.
      - name: Setup git user
        run: |
          git config --global user.name "${RUNGHA_APP_SLUG}[bot]"
          git config --global user.email "${RUNGHA_USER_ID}+${RUNGHA_APP_SLUG}[bot]@users.noreply.github.com"
        env:
          RUNGHA_APP_SLUG: ${{ steps.app-token.outputs.app-slug }} # just for defense against script injection
          RUNGHA_USER_ID: ${{ steps.get-user-id.outputs.user-id }} # just for defense against script injection

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4 v4.2.2
        with:
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ inputs.branchRef }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@b6e674f4b717d7b0ae3baee0fbe79f498905dfde # v1 v1.4.4
        with:
          java-version: 21

      - name: Extract version and validate tag
        id: versions
        run: |
          PATCH_VERSION=$(echo "$RUNGHA_BRANCH_REF" | sed 's/release-v\(.*\)/\1/')
          
          if git rev-parse "v${PATCH_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${PATCH_VERSION} already exists"
            exit 1
          fi
          
          echo "PATCH_VERSION=${PATCH_VERSION}" >> $GITHUB_OUTPUT
          echo "Patch version will be: ${PATCH_VERSION}"
        env:
          RUNGHA_BRANCH_REF: ${{ inputs.branchRef }} # just for defense against script injection

      - name: Push tmp branch for signed commit, set patch version
        run: |
          TMPRANDOM="$(printf "%04x" $RANDOM)$(printf "%04x" $RANDOM)$(printf "%04x" $RANDOM)"
          # random prefix so that it's not protected, but keep release information to give context
          # can't be protected because the github commit API doesn't allow to create a commit on
          # protected branch even though we have bypass rights for the token of the app
          TMPRELEASEBRANCH="copy-${TMPRANDOM}-${RUNGHA_BRANCH_REF}"
          git push origin "$RUNGHA_BRANCH_REF:$TMPRELEASEBRANCH"
          echo "TMPRELEASEBRANCH=$TMPRELEASEBRANCH" >> $GITHUB_ENV

          mvn versions:set -DnewVersion="$RUNGHA_PATCH_VERSION" -DgenerateBackupPoms=false
        env:
          RUNGHA_BRANCH_REF: ${{ inputs.branchRef }} # just for defense against script injection
          RUNGHA_PATCH_VERSION: ${{ steps.versions.outputs.PATCH_VERSION }} # just for defense against script injection

      # creates a signed commit on the tmp remote branch with our diff, and
      # then updates (fast-forward) our local branch to this new commit. It
      # works because the tmp remote branch was a copy of the local branch
      # before committing.
      - name: verified-bot-commit for main branch set release version
        uses: IAreKyleW00t/verified-bot-commit@27699d08b34a5440e6b4385c6ea3651602d26bcc # v1.3.3
        with:
          token: ${{ steps.app-token.outputs.token }}
          files: "**"
          message: ${{ format('Patched version {0}', steps.versions.outputs.PATCH_VERSION) }}
          ref: ${{ env.TMPRELEASEBRANCH }}

      - name: Create and push tag and cleanup remote tmp branch
        run: |
          git push origin ":$RUNGHA_TMPRELEASEBRANCH"
          git tag "v$RUNGHA_PATCH_VERSION"
          git push origin "v$RUNGHA_PATCH_VERSION"
          git push origin "$RUNGHA_BRANCH_REF"
        env:
          RUNGHA_PATCH_VERSION: ${{ steps.versions.outputs.PATCH_VERSION }} # just for defense against script injection
          RUNGHA_BRANCH_REF: ${{ inputs.branchRef }} # just for defense against script injection
          RUNGHA_TMPRELEASEBRANCH: ${{ env.TMPRELEASEBRANCH }} # just for defense against script injection

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          RUNGHA_PATCH_VERSION: ${{ steps.versions.outputs.PATCH_VERSION }} # just for defense against script injection
          RUNGHA_BRANCH_REF: ${{ inputs.branchRef }} # just for defense against script injection
        run: |
          gh release create "v$RUNGHA_PATCH_VERSION" \
            --title "v$RUNGHA_PATCH_VERSION" \
            --generate-notes \
            --notes "Patch release based on $RUNGHA_BRANCH_REF"
