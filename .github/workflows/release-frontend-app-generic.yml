on:
  workflow_call:
    inputs:
      releaseVersion:
        description: 'Release version (format: vX.X)'
        required: true
        type: string
      commitSha:
        description: 'SHA of the commit to release from'
        required: true
        type: string
      dockerImage:
        description: 'Name of the Docker image (e.g., organization/app-name)'
        required: true
        type: string
      dockerUsername:
        required: true
        type: string
      githubappId:
        description: 'GitHub App ID for authentication'
        required: true
        type: string
      environment:
        required: false
        default: 'release'
        type: string
      permission:
        required: false
        default: 'maintain' # "pull" or "triage" or "push" or "maintain" or "admin"
        type: string
    secrets:
      VERSIONBUMP_GHAPP_PRIVATE_KEY:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      sonar-token:
        required: true

env:
  NODE_OPTIONS: '--max_old_space_size=4096'

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      # don't allow to disable this check, and for security only succeed if everything goes perfectly and outputs "true"
      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check Actor Permission
        env:
          # Need to properly pass permission all the way down to jq as data to avoid script injections
          PERMISSION: ${{ inputs.permission }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "checking permission=$PERMISSION on repo=$GITHUB_REPOSITORY for user=$GITHUB_ACTOR"
          # no need to escape GITHUB_REPOSITORY and GITHUB_ACTOR because github
          # names can only contain ASCII letters, digits, and the characters ., # -, and _.
          # permission: legacy, is actually a role (one per user) and doesn't
          #   have "maintain" role, only ["none", "read", "write", "admin"]
          # role_name: one per user, new standard roles, custom roles, "" and
          #   "push" and "pull" instead of "none" and "read" and "write": "",
          #   "read", "triage", "write", "maintain", "admin" and also non
          #   standard custom roles
          # user.permissions: boolean status only for each standard permissions "pull", "triage", "push", "maintain", "admin"
          # So the best for now is to use user.permissions I think.
          # Not using gh --jq gojq because we can't use variables with it and also it automatically removes quotes from strings which could be an attack vector
          # NOTE: the gh api returns a JSON boolean so jq can only output true or false without quotes
          allowed=$(gh api "repos/$GITHUB_REPOSITORY/collaborators/$GITHUB_ACTOR/permission" | jq --arg PERMISSION "$PERMISSION" '.user.permissions[$PERMISSION]')
          [[ "$allowed" == "true" ]] || exit 1

      # TODO make a composite action for the next steps to setup git (unless create-github-app-token incorporates all this...)
      # Copied from create-github-app-token README "Configure git CLI for an app's bot user"
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@21cfef2b496dd8ef5b904c159339626a10ad380e # v1 v1.11.6
        with:
          app-id: ${{ inputs.githubappId }}
          private-key: ${{ secrets.VERSIONBUMP_GHAPP_PRIVATE_KEY }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${RUNGHA_APP_SLUG}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          RUNGHA_APP_SLUG: ${{ steps.app-token.outputs.app-slug }} # just for defense against script injection
      # git user not used normally anymore because we use the github commit API
      # to create the commits, but keep this anyway just in case. We do get the
      # exact same value as the one github uses for creating the signed commits.
      - name: Setup git user
        run: |
          git config --global user.name "${RUNGHA_APP_SLUG}[bot]"
          git config --global user.email "${RUNGHA_USER_ID}+${RUNGHA_APP_SLUG}[bot]@users.noreply.github.com"
        env:
          RUNGHA_APP_SLUG: ${{ steps.app-token.outputs.app-slug }} # just for defense against script injection
          RUNGHA_USER_ID: ${{ steps.get-user-id.outputs.user-id }} # just for defense against script injection

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4 v4.2.2
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4 v4.3.0
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org

      - name: Extract Version Numbers
        run: |
          if ! [[ $RUNGHA_RELEASE_VERSION =~ ^v([0-9]+)\.([0-9]+)$ ]]; then
            echo "Error: Invalid version format. Must be vX.X (e.g., v1.2)"
            exit 1
          fi
          
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          
          echo "RELEASE_MAJOR_VERSION=${MAJOR}" >> $GITHUB_ENV
          echo "RELEASE_MINOR_VERSION=${MINOR}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${MAJOR}.${MINOR}.0" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=release-v${MAJOR}.${MINOR}" >> $GITHUB_ENV
        env:
          RUNGHA_RELEASE_VERSION: ${{ inputs.releaseVersion }} # just for defense against script injection

      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check if commitSha is merged in main
        run: |
          # needs fetch-depth: 0
          # This ensures that only reviewed commits can be released because
          # we require reviews and pull requests to allow to merge in main.
          if ! main_contains=$(git branch -r --format='%(refname:short)' --contains "$RUNGHA_COMMIT_SHA" origin/main); then
            echo "ERROR checking whether sha $RUNGHA_COMMIT_SHA is merged in main or not"
            exit 1
          elif [ -z "$main_contains" ]; then
            echo "ERROR: sha $RUNGHA_COMMIT_SHA not merged in main"
            exit 1
          else
            echo "sha $RUNGHA_COMMIT_SHA merged in main, release will be performed"
          fi
        env:
          RUNGHA_COMMIT_SHA: ${{ inputs.commitSha }} # just for defense against script injection

      # TODO deduplicate this code when github actions allows to easily share a script used
      # by reusable workflows. Currently only the workflow file is checked out at the caller
      # There are no good workarounds to checkout a companion file (script or composite action)
      - name: Check if commitSha is missing already released commits
        run: |
          # The following block ensures that the new release will not omit
          # commits that were already released. If this case was allowed, then
          # it would for instance be possible to release a new version without
          # some security fixes. For linear histories, this would happen when
          # rereleasing an old commit as a new version. For non linear histories,
          # this could additionally happen when releasing a new commit (subsequently
          # merged in main) but that branches off of old commits (or even unrelated histories).
          # If the code that finds existing releases fails and doesn't find anything, it
          # could be the first release, or it could be that there is a bug or exploit. In
          # this case, instead of allowing to release anything, we just allow to release the
          # tip of main (allowing to release anything else would also allow to omit commits).
          # NOTE: needs fetch-depth: 0
          all_release_tags=$(git tag --list 'v[0-9]*')
          if [[ -z "$all_release_tags" ]]; then
            echo "WARN no existing release tags found, is this the first release?"
            if ! git_reference_parsed=$(git rev-parse "$RUNGHA_COMMIT_SHA"); then
              echo "ERROR rev-parsing gitRef $RUNGHA_COMMIT_SHA"
              exit 1
            fi
            if ! main_parsed=$(git rev-parse origin/main); then
              echo "ERROR rev-parsing origin/main"
              exit 1
            fi
            if [[ -n "$git_reference_parsed" && "$git_reference_parsed" != "$main_parsed" ]]; then
              echo "ERROR: No existing release found, must release the tip of main $main_parsed but got $git_reference_parsed"
              exit 1
            else
              echo "gitRef $RUNGHA_COMMIT_SHA is tip of main, release will be performed"
            fi
          else
            latest_main_release=$(git merge-base main $all_release_tags)
            if ! git merge-base --is-ancestor "$latest_main_release" "$RUNGHA_COMMIT_SHA"; then
              echo "ERROR gitRef $RUNGHA_COMMIT_SHA is not a descendant of the latest released commit $latest_main_release"
              exit 1
            else
              echo "gitRef $RUNGHA_COMMIT_SHA descends from previous releases, release will be performed"
            fi
          fi
        env:
          RUNGHA_COMMIT_SHA: ${{ inputs.commitSha }} # just for defense against script injection

      - name: Create Release Branch, push tmp branch for signed commit
        run: |
          git checkout -b "$RELEASE_BRANCH" "$RUNGHA_COMMIT_SHA"

          TMPRANDOM="$(printf "%04x" $RANDOM)$(printf "%04x" $RANDOM)$(printf "%04x" $RANDOM)"
          # random prefix so that it's not protected, but keep release information to give context
          # can't be protected because the github commit API doesn't allow to create a commit on
          # protected branch even though we have bypass rights for the token of the app
          TMPRELEASEBRANCH="copy-${TMPRANDOM}-${RELEASE_BRANCH}"
          git push origin "$RELEASE_BRANCH:$TMPRELEASEBRANCH"
          echo "TMPRELEASEBRANCH=$TMPRELEASEBRANCH" >> $GITHUB_ENV
        env:
          RUNGHA_COMMIT_SHA: ${{ inputs.commitSha }} # just for defense against script injection

      - name: Update Version and Tag
        run: |
          # Use npm version to update version, don't create commit and tag
          npm version --no-git-tag-version "$RELEASE_VERSION"

      # creates a signed commit on the tmp remote branch with our diff, and
      # then updates (fast-forward) our local branch to this new commit. It
      # works because the tmp remote branch was a copy of the local branch
      # before committing.
      - name: verified-bot-commit for main branch set release version
        uses: IAreKyleW00t/verified-bot-commit@27699d08b34a5440e6b4385c6ea3651602d26bcc # v1.3.3
        with:
          token: ${{ steps.app-token.outputs.token }}
          files: "**"
          message: ${{ format('{0}', env.RELEASE_VERSION) }}
          ref: ${{ env.TMPRELEASEBRANCH }}

      - name: Create local tag and cleanup remote tmp branch
        run: |
          git push origin ":$TMPRELEASEBRANCH"
          git tag "v$RELEASE_VERSION"

      - name: Install Dependencies
        run: npm ci

      - name: Quality Checks
        run: |
          npm run test:coverage
          npm run licenses-check

      - name: Build Application
        run: npm run build

      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@aa494459d7c39c106cc77b166de8b4250a32bb97 # v5.1.0
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          SONAR_TOKEN: ${{ secrets.sonar-token }}

      - name: Build and publish Docker image
        uses: elgohr/Publish-Docker-Github-Action@33a481be3e179353cb7793a92b57cf9a6c985860 # v4
        with:
          name: ${{ inputs.dockerImage }}
          username: ${{ inputs.dockerUsername }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tags: ${{ env.RELEASE_VERSION }}

      - name: Push release branch and tag
        run: |
          git push origin "$RELEASE_BRANCH"
          git push origin "v$RELEASE_VERSION"

      - name: Checkout main
        run: |
          git clean -f -d
          git checkout main
          git pull

      - name: Get current package version
        run: echo "CURRENT_NPM_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Extract current version
        run: |
          regex="(.*)-SNAPSHOT"
          if [[ $CURRENT_NPM_VERSION =~ $regex ]];
          then
            echo "CURRENT_RELEASE_VERSION=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          fi

      - name: Prepare Update SNAPSHOT version on main (tmp branch for signed commit)
        if: env.CURRENT_RELEASE_VERSION == env.RELEASE_VERSION
        run: |
          TMPRANDOM="$(printf "%04x" $RANDOM)$(printf "%04x" $RANDOM)$(printf "%04x" $RANDOM)"
          # random prefix so that it's not protected, but keep release information to give context
          # can't be protected because the github commit API doesn't allow to create a commit on
          # protected branch even though we have bypass rights for the token of the app
          TMPMAINBRANCH="copy-${TMPRANDOM}-main-${RELEASE_BRANCH}"
          git push origin "main:$TMPMAINBRANCH"
          echo "TMPMAINBRANCH=$TMPMAINBRANCH" >> $GITHUB_ENV

      - name: Update SNAPSHOT version on main
        if: env.CURRENT_RELEASE_VERSION == env.RELEASE_VERSION
        run: |
          # Calculate next development version
          NEW_MINOR=$((RELEASE_MINOR_VERSION + 1))
          DEV_VERSION="${RELEASE_MAJOR_VERSION}.${NEW_MINOR}.0-SNAPSHOT"
          
          # Update package.json with development version
          npm version ${DEV_VERSION} --no-git-tag-version
          
          echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV

      # creates a signed commit on the tmp remote branch with our diff, and
      # then updates (fast-forward) our local branch to this new commit. It
      # works because the tmp remote branch was a copy of the local branch
      # before committing.
      - name: verified-bot-commit for main branch
        if: env.CURRENT_RELEASE_VERSION == env.RELEASE_VERSION
        uses: IAreKyleW00t/verified-bot-commit@27699d08b34a5440e6b4385c6ea3651602d26bcc # v1.3.3
        with:
          token: ${{ steps.app-token.outputs.token }}
          files: "**"
          message: ${{ format('Bump version to v{0}', env.DEV_VERSION) }}
          ref: ${{ env.TMPMAINBRANCH }}

      - name: push to main and cleanup remote tmp branch
        if: env.CURRENT_RELEASE_VERSION == env.RELEASE_VERSION
        run: |
          git push origin ":${TMPMAINBRANCH}"
          git push origin main
