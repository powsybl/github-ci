on:
  workflow_call:
    inputs:
      githubappId:
        required: true
        type: string
      versionType:
        description: 'Version type increment (major | minor)'
        required: true
        type: string
      environment:
        required: false
        default: 'release'
        type: string
    secrets:
      VERSIONBUMP_GHAPP_PRIVATE_KEY:
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Validate Version Type
        run: |
          if [[ ! "${{ inputs.versionType }}" =~ ^(major|minor)$ ]]; then
            echo "Error: versionType must be one of: major, minor"
            echo "Received: ${{ inputs.versionType }}"
            exit 1
          fi

      - uses: actions/create-github-app-token@v1
        id: app-token
        name: Generate app token
        with:
          app-id: ${{ inputs.githubappId }}
          private-key: ${{ secrets.VERSIONBUMP_GHAPP_PRIVATE_KEY }}

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v1
        with:
          java-version: 21

      - name: Calculate versions
        id: versions
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          LATEST_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          
          case "${{ inputs.versionType }}" in
            "major")
              RELEASE_VERSION="$((MAJOR + 1)).0.0"
              NEXT_VERSION="$((MAJOR + 1)).1.0-SNAPSHOT"
              ;;
            "minor")
              RELEASE_VERSION="$MAJOR.$((MINOR + 1)).0"
              NEXT_VERSION="$MAJOR.$((MINOR + 2)).0-SNAPSHOT"
              ;;
          esac
          
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "Release version will be: ${RELEASE_VERSION}"
          echo "Next development version will be: ${NEXT_VERSION}"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set release version
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.RELEASE_VERSION }} -DgenerateBackupPoms=false
          git commit -am "Release v${{ steps.versions.outputs.RELEASE_VERSION }}"

      - name: Create and push tag
        run: |
          git tag v${{ steps.versions.outputs.RELEASE_VERSION }}
          git push origin v${{ steps.versions.outputs.RELEASE_VERSION }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh release create v${{ steps.versions.outputs.RELEASE_VERSION }} \
            --title "v${{ steps.versions.outputs.RELEASE_VERSION }}" \
            --generate-notes

      - name: Set next development version
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.NEXT_VERSION }} -DgenerateBackupPoms=false
          git commit -am "Update SNAPSHOT version to v${{ steps.versions.outputs.NEXT_VERSION }}"
          git push origin main